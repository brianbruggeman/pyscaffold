#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import os
import re
from setuptools import setup, find_packages


project_name = '${project}'

classifiers = [
    ${classifiers_list}
]

# Various requirements needed to do different operation
requirements = {
    # Requirements is the basic needs for this package
    'requirements': [
        ${requirements_list}
    ],

    # Docs should probably only be necessary in Continuous Integration
    'docs': [
        'sphinx',
        'sphinx_rtd_theme',
    ],

    # Examples probably is only necessary for development environments
    'examples': [
        'docopt'
    ],

    # Debug probably is only necessary for development environments
    'debug': [
        'ipdb',
        'ipython'
    ],

    # Tests are needed in a local and CI environments for py.test and tox
    'tests': [
        'pyyaml',
        'pytest',
        'pytest-flake8',
        'pytest-cov',
        'pytest-xdist'
    ],

    # Security identifies requirements for pip
    'security': [
        'pyOpenSSL>=0.13',
        'ndg-httpsclient',
        'pyasn1'
    ],

    # Deploy identifies upgrades to local system prior to deployment
    'deploy': [
        'ansible',
    ],

    # Monitoring identifies upgrades to remote system mostly for nagios
    'monitoring': [
        'inotify',
        'psutil',
        'graphitesend',
    ],
}

# Developers should probably run:  pip install .[dev]
requirements['dev'] = [
    r for k, reqs in requirements.items() for r in reqs
    if k not in ['requirements']
]

# All is for usability:  pip install .[all]
requirements['all'] = [
    r for k, reqs in requirements.items() for r in reqs
]

# Find package files
packages = find_packages()
cwd = os.path.abspath(os.path.dirname(__file__))

# Capture project metadata
engine = re.compile(r"^__(?P<key>(.*?))__ = '(?P<value>([^']*))'")
with open(os.path.join(cwd, project_name, '__init__.py'), 'r') as fd:
    metadata = {
        data['key']: data['value']
        for line in fd
        for data in [m.groupdict() for m in engine.finditer(line)]
    }

# Read License for setup
with open(os.path.join(cwd, 'LICENSE.txt'), 'rb') as fd:
    lic = fd.read()
    # Decode didn't chain with read
    lic = lic.decode('utf-8')

# Run setup
setup(
    # Package metadata information
    name=project_name,
    version=metadata.get('versionstr', 'unknown'),
    description=metadata.get('shortdoc', project_name),
    long_description=metadata.get('doc', 'unknown'),
    url=metadata.get('url', ''),
    license=lic,
    author=metadata.get('author', 'unknown'),
    author_email=metadata.get('email', 'unknown'),

    # Package Properties
    packages=packages,
    include_package_data=True,

    # Requirements
    setup_requires=requirements.get('setup') or [],
    install_requires=requirements['requirements'],
    extras_require={k: v for k, v in requirements.items() if k not in 'requirements'},
    tests_require=requirements.get('tests') or [],
    platforms=['any'],
    classifiers=classifiers,
    zip_safe=False,
)
